#!/usr/bin/env python3

# Copyright (c) Leonardo Baldin
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import json
import os
import signal
import subprocess
import sys

import dbus
import gi

gi.require_version("Gtk", "3.0")
gi.require_version("AppIndicator3", "0.1")
from gi.repository import AppIndicator3 as appindicator
from gi.repository import Gio, GLib, Gtk

ASUSD_CONF = "/etc/asusd/asusd.conf"
ICON_BASE_PATH = "/usr/share/pixmaps"
GFX_MODES = {
	0: "nvidia",
	1: "integrated",
	2: "compute",
	3: "vfio",
	4: "hybrid",
}
GFX_USER_ACTION = {
	0: "logout",
	1: "reboot",
	2: "integrated",
	3: "none",
}

POWER_MODES = [
	{
		"label": "stock       [35/42/60 max-performance]",
		"exec": "sudo ryzenadj --stapm-limit=35000 --slow-limit=42000 --fast-limit=60000 --tctl-temp=90 --max-performance"
	},
	{
		"label": "medium      [20/20/40 max-performance]",
		"exec": "sudo ryzenadj --stapm-limit=20000 --slow-limit=20000 --fast-limit=40000 --tctl-temp=90 --max-performance"
	},
	{
		"label": "low         [15/20/25 max-performance]",
		"exec": "sudo ryzenadj --stapm-limit=15000 --slow-limit=20000 --fast-limit=25000 --tctl-temp=90 --max-performance"
	},
	{
		"label": "lowest      [15/15/15 max-performance]",
		"exec": "sudo ryzenadj --stapm-limit=15000 --slow-limit=15000 --fast-limit=15000 --tctl-temp=90 --max-performance"
	},
	{
		"label": "battery     [20/20/40 power-saving]",
		"exec": "sudo ryzenadj --stapm-limit=20000 --slow-limit=20000 --fast-limit=40000 --tctl-temp=90 --power-saving"
	},
	{
		"label": "battery low [15/15/15 power-saving]",
		"exec": "sudo ryzenadj --stapm-limit=15000 --slow-limit=15000 --fast-limit=15000 --tctl-temp=90 --power-saving"
	}
]

CPU_MODES = {
	0: "powersave",
	1: "schedutil",
	2: "performance",
}

class TrayIcon:
	config = None
	gfx_proxy = None
	profile_proxy = None
	icon = None
	image_pixbuf = None
	presets = []

	def __init__(self):
		with open(ASUSD_CONF, "r") as file:
			self.config = json.load(file)
		self.presets = self.config["power_profiles"].keys()

		bus = dbus.SystemBus()
		self.gfx_proxy = dbus.Interface(
			bus.get_object("org.asuslinux.Daemon", "/org/asuslinux/Gfx"),
			dbus_interface="org.asuslinux.Daemon",
		)
		self.profile_proxy = dbus.Interface(
			bus.get_object("org.asuslinux.Daemon", "/org/asuslinux/Profile"),
			dbus_interface="org.asuslinux.Daemon",
		)

		self.icon = appindicator.Indicator.new(
			"asusctltray",
			Gtk.STOCK_INFO,
			appindicator.IndicatorCategory.SYSTEM_SERVICES,
		)
		self.icon.set_status(appindicator.IndicatorStatus.ACTIVE)
		self.build_menu()
		self.icon.set_menu(self.menu)
		self.icon.set_icon_theme_path(ICON_BASE_PATH)
		self.icon.set_icon_full("asusctltray", "")

	def build_menu(self):
		self.menu = Gtk.Menu()

		self.add_graphics("Graphics")
		self.menu.append(Gtk.SeparatorMenuItem())
		self.add_presets("Profiles")
		self.menu.append(Gtk.SeparatorMenuItem())
		self.add_power("Power")
		self.menu.append(Gtk.SeparatorMenuItem())
		self.add_cpu("CPU Governor")
		self.menu.append(Gtk.SeparatorMenuItem())

		qicon = Gtk.MenuItem()
		qicon.set_label("Quit asusctltray")
		qicon.connect("activate", kill)
		self.menu.append(qicon)

		self.menu.show_all()

	def add_presets(self, title):
		if len(self.presets) == 0:
			return

		current_profile = self.config["active_profile"]

		titem = Gtk.MenuItem()
		titem.set_label(title)
		titem.set_sensitive(False)
		self.menu.append(titem)
		group = []
		for p in self.presets:
			pitem = Gtk.RadioMenuItem.new_with_label(group, p)
			group = pitem.get_group()
			pitem.set_active(p == current_profile)
			pitem.connect("activate", self.load_preset)
			self.menu.append(pitem)

	def load_preset(self, widget):
		# This is called when the widget is deselected too, so check if active
		if widget.get_active():
			self.profile_proxy.SetProfile(widget.get_label())

	def add_graphics(self, title):
		current_graphics = self.get_current_graphics()

		titem = Gtk.MenuItem()
		titem.set_label(title)
		titem.set_sensitive(False)
		self.menu.append(titem)
		group = []
		for g in GFX_MODES.values():
			# Skip if vfio is disabled in configuration
			if not self.config["gfx_vfio_enable"] and g == "vfio":
				continue
			gitem = Gtk.RadioMenuItem.new_with_label(group, g)
			group = gitem.get_group()
			gitem.set_active(g == current_graphics)
			gitem.connect("activate", self.switch_graphics_dbus)
			self.menu.append(gitem)

	def get_current_graphics(self):
		vendor = self.gfx_proxy.Vendor()
		return GFX_MODES[vendor]

	def switch_graphics(self, widget):
		# This is called when the widget is deselected too, so check if active
		if not widget.get_active():
			return
		dialog = Gtk.MessageDialog(
			destroy_with_parent=True,
			message_type=Gtk.MessageType.WARNING,
			buttons=Gtk.ButtonsType.OK,
			text="Graphics: %s" % widget.get_label(),
		)
		dialog.format_secondary_text(
			"Switching graphics could require logout/reboot. Proceed?"
		)
		resp = dialog.run()
		if resp == Gtk.ResponseType.OK:
			os.system("asusctl graphics -f -m %s" % widget.get_label())
		else:
			dialog.destroy()

	def switch_graphics_dbus(self, widget):
		# This is called when the widget is deselected too, so check if active
		if not widget.get_active():
			return

		if self.get_current_graphics() == widget.get_label():
			return

		mode_ind = [k for (k, v) in GFX_MODES.items() if v == widget.get_label()][0]
		action_ind = self.gfx_proxy.SetVendor(mode_ind)
		action = GFX_USER_ACTION[action_ind]
		if action == "integrated":
			dialog = self.build_dialog(
				"You must switch to Integrated mode before switching to Compute or VFIO.",
				"Got it",
			)
			dialog.run()
			dialog.destroy()
		elif action != "none":
			dialog = self.build_dialog(
				f"Graphics changed to {widget.get_label()}. A {action} is required (save your files!)."
			)
			dialog.add_buttons("Later", Gtk.ResponseType.CLOSE)
			if action == "reboot":
				dialog.add_buttons("Reboot the system", Gtk.ResponseType.OK)
				resp = dialog.run()
				if resp == Gtk.ResponseType.OK:
					os.system("systemctl reboot")
				dialog.destroy()
			elif action == "logout":
				dialog.add_buttons("Log me out", Gtk.ResponseType.OK)
				resp = dialog.run()
				if resp == Gtk.ResponseType.OK:
					res = subprocess.run(
						["loginctl", "session-status", "--no-pager"],
						stdout=subprocess.PIPE,
					)
					session_n = res.stdout.decode("utf-8").split(" ")[0]
					os.system(f"loginctl terminate-session {session_n}")
				dialog.destroy()
				
	def add_power(self, title):
		current_power = self.get_current_power()

		titem = Gtk.MenuItem()
		titem.set_label(title)
		titem.set_sensitive(False)
		self.menu.append(titem)
		group = []
		for power_id,power_mode in enumerate(POWER_MODES):
			gitem = Gtk.RadioMenuItem.new_with_label(group, power_mode.get("label"))
			group = gitem.get_group()
			gitem.set_active(power_id == current_power)
			gitem.connect("activate", self.switch_power, power_mode.get("exec"))
			self.menu.append(gitem)
			
	def get_current_power(self):
		#@TODO - FIXME
		return POWER_MODES[0]
		
	def switch_power(self, widget, exec):
		# This is called when the widget is deselected too, so check if active
		if not widget.get_active():
			return

		os.system(exec)

		#os.system("power %s" % widget.get_label())
		
	def add_cpu(self, title):
		current_power = self.get_current_cpu()

		titem = Gtk.MenuItem()
		titem.set_label(title)
		titem.set_sensitive(False)
		self.menu.append(titem)
		group = []
		for g in CPU_MODES.values():
			gitem = Gtk.RadioMenuItem.new_with_label(group, g)
			group = gitem.get_group()
			gitem.set_active(g == current_power)
			gitem.connect("activate", self.switch_cpu)
			self.menu.append(gitem)
			
	def get_current_cpu(self):
		#@TODO - FIXME
		return subprocess.check_output(['cat', '/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor']).rstrip().decode(sys.stdout.encoding)
		
	def switch_cpu(self, widget):
		# This is called when the widget is deselected too, so check if active
		if not widget.get_active():
			return
		os.system("sudo cpupower frequency-set -g %s" % widget.get_label())

	def build_dialog(self, msg, btn_text=None):
		dialog = Gtk.MessageDialog(
			destroy_with_parent=True,
			message_type=Gtk.MessageType.WARNING,
			text="asusctltray",
		)
		dialog.format_secondary_text(msg)
		return dialog


def kill(obj1, obj2=False):
	Gtk.main_quit()


if __name__ == "__main__":
	signal.signal(signal.SIGINT, signal.SIG_IGN)
	signal.signal(signal.SIGINT, kill)
	TrayIcon()
	Gtk.main()
